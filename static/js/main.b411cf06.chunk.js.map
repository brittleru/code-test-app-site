{"version":3,"sources":["components/Histograma.jsx","App.js","serviceWorker.js","index.js"],"names":["BarChart","xdim","ydim","margin","xdata","ydata","chart","useRef","useEffect","svg","d3","current","addAxes","addBars","addText","xscale","domain","range","left","xAxis","append","call","attr","top","yscale","yAxis","linearScale","scaledYData","map","yval","selectAll","data","enter","bandwidth","d","i","text","right","bottom","padding","className","viewBox","preserveAspectRatio","width","height","style","backgroundColor","ref","client","ApolloClient","uri","postsQuery","gql","theResult","resultQuery","a","query","then","res","dataForX","dataForY","allPosts","length","num","parseFloat","theData","moment","Date","format","j","includes","console","log","waiting","App","props","toggleDiv","state","show","toggleText","setState","bind","months","loading","error","toString","Histograma","color","borderTop","borderRadius","onClick","post","theDate","key","id","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"maA6HeA,G,OAvHE,SAAC,GAAwC,IAAvCC,EAAsC,EAAtCA,KAAMC,EAAgC,EAAhCA,KAAMC,EAA0B,EAA1BA,OAAQC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,MAErCC,EAAQC,iBAAO,MACrBC,qBAAU,WACR,IAAMC,EAAMC,IAAUJ,EAAMK,SAE5BC,EAAQH,GACRI,EAAQJ,GACRK,EAAQL,KACP,CAACR,EAAMC,EAAMC,EAAQC,EAAOC,IAI/B,IAAMO,EAAU,SAACH,GAGf,IAAMM,EAASL,MACGM,OAAOZ,GACPa,MAAM,CAACd,EAAOe,KAAMjB,EAAOE,EAAOe,OAE9CC,EAAQT,IAAcK,GAG5BN,EAAIW,OAAO,KACPC,KAAKF,GACLG,KAAK,YAFT,uBAEsCpB,EAAOC,EAAOoB,IAFpD,MAKA,IAAMC,EAASd,MACGM,OAAO,CAAC,EAAGN,IAAOL,KAClBY,MAAM,CAACf,EAAM,IAEzBuB,EAAQf,IAAYc,GAG1Bf,EAAIW,OAAO,KACPC,KAAKI,GACLH,KAAK,YAFT,oBAEmCnB,EAAOe,KAF1C,aAEmDf,EAAOoB,IAF1D,OAMIV,EAAU,SAACJ,GACf,IAAMiB,EAAchB,MACGM,OAAO,CAAC,EAAGN,IAAOL,KAClBY,MAAM,CAAC,EAAGf,IAE3ByB,EAActB,EAAMuB,KAAI,SAAAC,GAC5B,OAAOH,EAAYG,MAGrBpB,EAAIqB,UAAU,QACVC,KAAKJ,GACLK,QACAZ,OAAO,QACPE,KAAK,QAASP,EAAOkB,aACrBX,KAAK,UAAU,SAACY,GACf,OAAOA,KAERZ,KAAK,KAAK,SAACY,EAAGC,GACb,OAAOpB,EAAOX,EAAM+B,OAErBb,KAAK,KAAK,SAACY,GACV,OAAO/B,EAAOoB,IAAMrB,EAAOgC,KAE5BZ,KAAK,OAAQ,WACbA,KAAK,SAAU,sBAEnBb,EAAIqB,UAAU,QACVC,KAAKJ,GACLK,QACAZ,OAAO,QACPgB,MAAK,SAACF,GAAD,OAAOA,KACZZ,KAAK,KAAK,SAACY,EAAGC,GAAJ,OAAc,GAAJA,KACpBb,KAAK,KAAK,SAACY,EAAGC,GAAJ,OAAUjC,EAAQ,GAAKgC,EAAK,MAItCpB,EAAU,SAACL,GACfA,EAAIW,OAAO,QACPgB,KAAK,sCACLd,KAAK,cAAe,UACpBA,KAAK,KAAMnB,EAAOe,KAAOf,EAAOkC,MAAQpC,GAAQ,GAChDqB,KAAK,IAAMnB,EAAOoB,IAAO,GAE7Bd,EAAIW,OAAO,QACPgB,KAAK,mBACLd,KAAK,MAAOnB,EAAOoB,IAAMpB,EAAOmC,OAASpC,GAAQ,GACjDoB,KAAK,IAAKnB,EAAOe,KAAO,GACxBI,KAAK,YAJT,sBAIqCnB,EAAOe,KAAO,EAJnD,aAIyDf,EAAOoB,IAAM,EAJtE,OAQIR,EAASL,MACGM,OAAOZ,GACPa,MAAM,CAACd,EAAOe,KAAMjB,EAAOE,EAAOe,OAClCqB,QAAQ,IAGX7B,MACEM,OAAO,CAAC,EAAGN,IAAOL,KAClBY,MAAM,CAACf,EAAM,IAG7B,OACE,yBAAKsC,UAAU,aACb,yBAAKC,QAAO,cAASxC,EAAOE,EAAOe,KAAOf,EAAOkC,MAArC,YAA8CnC,EAAOC,EAAOoB,IAAMpB,EAAOmC,QAChFI,oBAAoB,WACpBC,MAAM,OACNC,OAAO,OACPC,MAAO,CAACC,gBAAiB,WACzBC,IAAKzC,O,qPC3GlB,IAAM0C,EAAS,IAAIC,IAAa,CAC9BC,IAAI,uCAIAC,EAAaC,IAAH,KAiBZC,EAAY,G,SAEDC,I,2EAAf,sBAAAC,EAAA,+EAESP,EAAOQ,MAAM,CAClBA,MAAOL,IACJM,MAAK,SAAAC,GAGN,IAFA,IAAIC,EAAW,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC7CC,EAAW,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OACpFzB,EAAI,EAAGA,EAAIuB,EAAI3B,KAAK8B,SAASC,OAAQ3B,IAAK,CAGjD,IAFA,IAAI4B,EAAMC,WAAWN,EAAI3B,KAAK8B,SAAT,UAAqB1B,IAArB,WACjB8B,EAAUC,IAAO,IAAIC,KAAKJ,IAAMK,OAAO,aAClCC,EAAI,EAAGA,EAAIT,EAASE,OAAQO,IAC/BJ,EAAQK,SAASV,EAASS,MAC5BV,EAASU,IAAM,GAGjBE,QAAQC,MAKZ,OAFAnB,EAAS,UAAOM,GAETA,MApBb,4C,kEAwBA,sBAAAJ,EAAA,+EAE0BD,IAF1B,sH,0DAaAmB,GACAF,QAAQC,IAAInB,G,IAiIGqB,E,kDA/Hb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IASRC,UAAY,WAAO,IAAD,EACW,EAAKC,MAAzBC,EADS,EACTA,KAAMC,EADG,EACHA,WACM,cAAfA,GACF,EAAKC,SAAS,CACZF,MAAOA,EACPC,WAAY,cAGG,cAAfA,GACF,EAAKC,SAAS,CACZF,MAAOA,EACPC,WAAY,eAnBhB,EAAKF,MAAQ,CACXC,MAAK,EACLC,WAAY,aAEd,EAAKH,UAAY,EAAKA,UAAUK,KAAf,gBANA,E,qDA2BT,IAAD,OACDC,EAAS,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAI7F,OACE,kBAAC,IAAD,CAAgBlC,OAAQA,GACtB,yBAAKR,UAAU,OACb,4BAAQA,UAAU,cAChB,wBAAIA,UAAU,aAAd,oBAGF,kBAAC,IAAD,CAAOgB,MAAOL,IACX,YAA6B,IAA3BgC,EAA0B,EAA1BA,QAASC,EAAiB,EAAjBA,MAAOrD,EAAU,EAAVA,KACjB,GAAIoD,EACF,OAAO,yBAAK3C,UAAU,eAAf,cAGT,GAAI4C,EACF,OAAO,sCAAYA,EAAMC,YAG3B,GAAItD,EAAM,CAER,IADA,IAAI4B,EAAW,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACxCxB,EAAI,EAAGA,EAAIJ,EAAK8B,SAASC,OAAQ3B,IAIvC,IAHA,IAAI4B,EAAMC,WAAWjC,EAAK8B,SAAL,UAAiB1B,IAAjB,WACjB8B,EAAUC,IAAO,IAAIC,KAAKJ,IAAMK,OAAO,aAElCC,EAAI,EAAGA,EAAIa,EAAOpB,OAAQO,IAC7BJ,EAAQK,SAASY,EAAOb,MAC1BV,EAASU,IAAM,GAKrB,OADAE,QAAQC,IAAIb,GAEV,yBAAKnB,UAAU,aACb,kBAAC8C,EAAD,CACErF,KAAM,IACNC,KAAM,IACNC,OAAQ,CACNoB,IAAK,GACLe,OAAQ,GACRpB,KAAM,IACNmB,MAAO,KAETjC,MAAO8E,EACP7E,MAAOsD,IAGT,wBAAId,MAAO,CAAC0C,MAAO,UACPzC,gBAAiB,UACjB0C,UAAW,oBAEXC,aAAc,GACd9C,MAAO,cAW9B,kBAAC,IAAD,CAAOa,MAAOL,IACX,YAA6B,IAA3BgC,EAA0B,EAA1BA,QAASC,EAAiB,EAAjBA,MAAOrD,EAAU,EAAVA,KACjB,OAAIoD,EACK,yBAAK3C,UAAU,eAAf,cAGL4C,EACK,sCAAYA,EAAMC,YAIzB,yBAAK7C,UAAU,YAGf,4BAAQA,UAAU,SAASkD,QAAU,EAAKd,WAAa,EAAKC,MAAME,aAC9D,EAAKF,MAAMC,MAAQ/C,EAAK8B,SAASjC,KAAI,SAAC+D,GACtC,IAAIC,EAAU1B,IAAO,IAAIC,KAAKH,WAAW2B,EAAI,aAAkBvB,OAAO,2BACtE,OAAO,yBAAK5B,UAAU,YAAYqD,IAAKF,EAAKG,IAArC,gBAAmDF,WAQpE,6D,GAvHQG,aC5DEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnD,MAAK,SAAAoD,GACJA,EAAaC,gBAEdC,OAAM,SAAA3B,GACLb,QAAQa,MAAMA,EAAM4B,c","file":"static/js/main.b411cf06.chunk.js","sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport * as d3 from 'd3';\r\nimport \"./histograma.css\";\r\n\r\n// jimport useEffect and useRef\r\n// add  to svg\r\nconst BarChart = ({xdim, ydim, margin, xdata, ydata}) => {\r\n\r\n   const chart = useRef(null);\r\n   useEffect(() => {\r\n     const svg = d3.select(chart.current);\r\n\r\n     addAxes(svg);\r\n     addBars(svg);\r\n     addText(svg);\r\n   }, [xdim, ydim, margin, xdata, ydata]);\r\n\r\n\r\n   // Adding the \"x\" and \"y\" axes it's info\r\n   const addAxes = (svg) => {\r\n\r\n      // The \"x\" axe\r\n     const xscale = d3.scaleBand()\r\n                      .domain(xdata)\r\n                      .range([margin.left, xdim + margin.left]);\r\n\r\n     const xAxis = d3.axisBottom(xscale);\r\n\r\n     // Adding \"x\" axe to svg\r\n     svg.append(\"g\")\r\n        .call(xAxis)\r\n        .attr(\"transform\", `translate(0, ${ydim + margin.top})`);\r\n\r\n     // The \"y\" axe\r\n     const yscale = d3.scaleLinear()\r\n                      .domain([0, d3.max(ydata)])\r\n                      .range([ydim, 0]);\r\n\r\n     const yAxis = d3.axisLeft(yscale);\r\n\r\n     // Adding \"y\" axe to svg\r\n     svg.append(\"g\")\r\n        .call(yAxis)\r\n        .attr(\"transform\", `translate(${margin.left}, ${margin.top})`)\r\n   }\r\n\r\n   // Adding the chart stuff\r\n   const addBars = (svg) => {\r\n     const linearScale = d3.scaleLinear()\r\n                           .domain([0, d3.max(ydata)])\r\n                           .range([0, ydim]);\r\n\r\n     const scaledYData = ydata.map(yval => {\r\n       return linearScale(yval);\r\n     });\r\n\r\n     svg.selectAll(\"rect\")\r\n        .data(scaledYData)\r\n        .enter()\r\n        .append(\"rect\")\r\n        .attr(\"width\", xscale.bandwidth())\r\n        .attr(\"height\", (d) => {\r\n          return d;\r\n        })\r\n        .attr(\"x\", (d, i) => {\r\n          return xscale(xdata[i]);\r\n        })\r\n        .attr(\"y\", (d) => {\r\n          return margin.top + ydim - d;\r\n        })\r\n        .attr(\"fill\", \"#19d3da\")\r\n        .attr(\"stroke\", \"rgba(0, 0, 0, 0.3)\");\r\n\r\n     svg.selectAll(\"text\")\r\n        .data(scaledYData)\r\n        .enter()\r\n        .append(\"text\")\r\n        .text((d) => d)\r\n        .attr(\"x\", (d, i) => i * 70)\r\n        .attr(\"y\", (d, i) => ydim - (10 * d) - 3);\r\n   }\r\n\r\n   // Title of the graph\r\n   const addText = (svg) => {\r\n     svg.append(\"text\")\r\n        .text(\"Number of Each Month Posts in 2019\")\r\n        .attr(\"text-anchor\", \"middle\")\r\n        .attr(\"x\", (margin.left + margin.right + xdim) / 2)\r\n        .attr(\"y\", (margin.top) / 2)\r\n\r\n     svg.append(\"text\")\r\n        .text(\"Number of Posts\")\r\n        .attr(\"x\", -(margin.top + margin.bottom + ydim) / 2)\r\n        .attr(\"y\", margin.left / 2)\r\n        .attr(\"transform\", `rotate(-90, ${margin.left / 2}, ${margin.top / 2})`)\r\n\r\n   }\r\n\r\n   const xscale = d3.scaleBand()\r\n                    .domain(xdata)\r\n                    .range([margin.left, xdim + margin.left])\r\n                    .padding(0.2);\r\n\r\n\r\n   const yscale = d3.scaleLinear()\r\n                   .domain([0, d3.max(ydata)])\r\n                   .range([ydim, 0]);\r\n\r\n\r\n    return (\r\n      <div className=\"the-chart\">\r\n        <svg viewBox={`0 0 ${xdim + margin.left + margin.right} ${ydim + margin.top + margin.bottom}`}\r\n             preserveAspectRatio=\"xMinYMin\"\r\n             width=\"100%\"\r\n             height=\"100%\"\r\n             style={{backgroundColor: \"#686d76\"}}\r\n             ref={chart}\r\n             >\r\n\r\n        </svg>\r\n      </div>\r\n    );\r\n\r\n}\r\n\r\nexport default BarChart;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//\r\n// componentDidMount() {\r\n//   this.drawChart();\r\n// }\r\n//\r\n// drawChart() {\r\n//   const data = this.props.data;\r\n//\r\n//   const svg = d3.select(\"body\")\r\n//   .append(\"svg\")\r\n//   .attr(\"width\", this.props.width)\r\n//   .attr(\"height\", this.props.height)\r\n//   .style(\"margin-left\", 100);\r\n//\r\n//   svg.selectAll(\"rect\")\r\n//     .data(data)\r\n//     .enter()\r\n//     .append(\"rect\")\r\n//     .attr(\"x\", (d, i) => i * 70)\r\n//     .attr(\"y\", (d, i) => this.props.height - 10 * d)\r\n//     .attr(\"width\", 18)\r\n//     .attr(\"height\", (d, i) => d * 10)\r\n//     .attr(\"fill\", \"green\")\r\n//\r\n//   svg.selectAll(\"text\")\r\n//     .data(data)\r\n//     .enter()\r\n//     .append(\"text\")\r\n//     .text((d) => d)\r\n//     .attr(\"x\", (d, i) => i * 70)\r\n//     .attr(\"y\", (d, i) => this.props.height - (10 * d) - 3);\r\n//\r\n//\r\n//\r\n// }\r\n//\r\n// render(){\r\n//   return (\r\n//     <div>\r\n//     <div id={\"#\" + this.props.id}></div>\r\n//     </div>\r\n//   );\r\n// }\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider, Query } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport moment from \"moment\";\nimport Histograma from \"./components/Histograma\"\n\n// Connect my site to GraphQL/ FakerQL\nconst client = new ApolloClient({\n  uri: `https://fakerql.stephix.uk/graphql`\n});\n\n// My Query of posts\nconst postsQuery = gql `\n{\n  allPosts(count: 100) {\n    id\n    title\n    body\n    published\n    createdAt\n    author {\n      id\n      firstName\n      lastName\n      avatar\n    }\n  }\n}\n`;\nlet theResult = [];\n// Running query\nasync function resultQuery() {\n\n  return client.query({\n    query: postsQuery\n    }).then(res => {\n      let dataForX = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n      let dataForY = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n      for (let i = 0; i < res.data.allPosts.length; i++) {\n        let num = parseFloat(res.data.allPosts[`${i}`][\"createdAt\"]);\n        let theData = moment(new Date(num)).format(\"MMM Do YY\")\n        for (let j = 0; j < dataForY.length; j++) {\n          if (theData.includes(dataForY[j])) {\n            dataForX[j] += 1;\n          }\n        }\n          console.log();\n      }\n\n      theResult = [...dataForX];\n\n      return dataForX;\n    });\n}\n\nasync function waiting() {\n  try {\n    const result1 = await resultQuery();\n    if(result1) {\n      // console.log(theResult);\n    }\n  }\n  catch (err) {\n    // console.log(err);\n  }\n\n}\n\nwaiting();\nconsole.log(theResult);\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      show:true,\n      toggleText: \"Show Data\"\n    };\n    this.toggleDiv = this.toggleDiv.bind(this);\n\n  }\n\n  toggleDiv = () => {\n    const {show, toggleText} = this.state;\n    if (toggleText === \"Show Data\") {\n      this.setState({\n        show: !show,\n        toggleText: \"Hide Data\"\n      })\n    }\n    if (toggleText === \"Hide Data\") {\n      this.setState({\n        show: !show,\n        toggleText: \"Show Data\"\n      })\n    }\n\n  }\n\n  render() {\n    const months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n    // const vals = [...theResult];\n\n    let count = 0;\n    return (\n      <ApolloProvider client={client}>\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <h1 className=\"App-title\">Data Histrogram</h1>\n          </header>\n\n          <Query query={postsQuery}>\n            {({loading, error, data}) => {\n              if (loading) {\n                return <div className=\"loading-div\">Loading...</div>\n              }\n\n              if (error) {\n                return <div>Error {error.toString()}</div>\n              }\n\n              if (data) {\n                let dataForX = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n                for (let i = 0; i < data.allPosts.length; i++) {\n                   let num = parseFloat(data.allPosts[`${i}`][\"createdAt\"]);\n                   let theData = moment(new Date(num)).format(\"MMM Do YY\")\n\n                   for (let j = 0; j < months.length; j++) {\n                     if (theData.includes(months[j])) {\n                       dataForX[j] += 1;\n                     }\n                   }\n                 }\n                 console.log(dataForX);\n                 return (\n                   <div className=\"histogram\">\n                     <Histograma\n                       xdim={750}\n                       ydim={500}\n                       margin={{\n                         top: 80,\n                         bottom: 80,\n                         left: 120,\n                         right: 120\n                       }}\n                       xdata={months}\n                       ydata={dataForX}\n\n                     />\n                     <hr style={{color: \"#eeeeee\",\n                                 backgroundColor: \"#eeeeee\",\n                                 borderTop: \"1px solid #eeeeee\",\n\n                                 borderRadius: 40,\n                                 width: \"70%\"\n                               }}\n                     />\n                   </div>\n                 );\n              }\n            }\n          }\n          </Query>\n\n\n          <Query query={postsQuery}>\n            {({loading, error, data}) => {\n              if (loading) {\n                return <div className=\"loading-div\">Loading...</div>\n              }\n\n              if (error) {\n                return <div>Error {error.toString()}</div>\n              }\n\n              return (\n                <div className=\"data-div\">\n\n\n                <button className=\"button\" onClick={ this.toggleDiv }>{this.state.toggleText}</button>\n                  {!this.state.show && data.allPosts.map((post) => {\n                    let theDate = moment(new Date(parseFloat(post.[\"createdAt\"]))).format(\"MMMM Do YYYY, h:mm:ss a\");\n                    return <div className=\"data-divs\" key={post.id}>{`Date: ${theDate}`}</div>\n                  })}\n\n                </div>\n              );\n            }}\n          </Query>\n\n          <footer>\n              by Mocanu Sebastian\n          </footer>\n        </div>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n\n\n\n\n\n\n\n\n\n//\n// <div>\n//   {\n//     data.allPosts.map((b) => {\n//       count++;\n//       let sdate = moment(new Date(parseFloat(b.[\"createdAt\"]))).format(\"MMM Do YY\");\n//       return <div key={b.id}>{`Date ${count - parseFloat(data.allPosts.length)}: ${sdate}`}</div>\n//     })\n//   }\n// </div>\n\n\n\n\n\n\n//\n//\n// <Query query={postsQuery}>\n//   {({loading, error, data}) => {\n//     console.log(data);\n//     let dataForX = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n//\n//     for (let i = 0; i < data.allPosts.length; i++) {\n//       let num = parseFloat(data.allPosts[`${i}`][\"createdAt\"]);\n//       let theData = moment(new Date(num)).format(\"MMM Do YY\")\n//\n//       for (let j = 0; j < months.length; j++) {\n//         if (theData.includes(months[j])) {\n//           dataForX[j] += 1;\n//         }\n//       }\n//     }\n//     console.log(dataForX);\n//\n//     if(loading) {\n//       while(loading) {\n//         return (\n//           <div>Loading...</div>\n//         );\n//       }\n//     }\n//     if (error) {\n//       return (\n//         <div>Error {error.toString()}</div>\n//       );\n//     }\n//\n//     return (\n//       <div className=\"histogram\">\n//         <Histograma\n//           xdim={750}\n//           ydim={500}\n//           margin={{\n//             top: 80,\n//             bottom: 80,\n//             left: 120,\n//             right: 120\n//           }}\n//           xdata={months}\n//           ydata={dataForX}\n//         />\n//       </div>\n//     );\n//   }\n// }\n//\n// </Query>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//\n//\n// return (\n//   <div>\n//     {\n//        data.allPosts.map((b) => {\n//           let num = parseFloat(b[\"createdAt\"]);\n//           let theData = moment(new Date(num)).format(\"MMM Do YY\")\n//\n//           for (let j = 0; j < months.length; j++) {\n//             if (theData.includes(months[j])) {\n//               dataForX[j] += 1;\n//             }\n//           }\n//\n//         count++;\n//         // console.log(dataForX);\n//         // console.log(count);\n//         // console.log(b[\"createdAt\"]);\n//         return (\n//           <div className=\"histogram\">\n//             <Histograma\n//               xdim={750}\n//               ydim={500}\n//               margin={{\n//                 top: 80,\n//                 bottom: 80,\n//                 left: 120,\n//                 right: 120\n//               }}\n//               xdata={months}\n//               ydata={dataForX}\n//             />\n//           </div>\n//         );\n//       })\n//\n//     }\n//   </div>\n// );\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}